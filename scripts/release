#!/bin/bash

run_checks() {
  # Check if a version argument is provided
  if [ -z "$1" ]; then
    echo "Usage: $0 <version>"
    exit 1
  fi

  # Check if the current branch is 'main'
  CURRENT_BRANCH=$(git branch --show-current)
  if [ "$CURRENT_BRANCH" != "main" ]; then
    echo "Error: You are not on the 'main' branch. Current branch is '$CURRENT_BRANCH'."
    exit 1
  fi

  # Check if the 'main' branch is up to date
  git fetch origin main

  LOCAL_COMMIT=$(git rev-parse main)
  REMOTE_COMMIT=$(git rev-parse origin/main)

  if [ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]; then
    echo "Error: The 'main' branch is not up to date with 'origin/main'."
    exit 1
  fi
}

get_current_version() {
  grep '^version = ' "$PYPROJECT_FILE" | sed -E 's/version = "(.*)"/\1/'
}

# Usage: NEW_VERSION=$(increment_version "<current_version>" "<version_type>")
increment_version() {
  local version=$1
  local type=$2

  IFS='.' read -r -a parts <<<"$version"
  major=${parts[0]}
  minor=${parts[1]}
  patch=${parts[2]}

  case "$type" in
  major)
    ((major += 1))
    minor=0
    patch=0
    ;;
  minor)
    ((minor += 1))
    patch=0
    ;;
  patch)
    ((patch += 1))
    ;;
  *)
    echo "Invalid version type: $type"
    exit 1
    ;;
  esac

  echo "$major.$minor.$patch"
}

################################################################
################# Main script execution ########################
################################################################
run_checks "$@"

# Initialize variables
VERSION_TYPE=$1
THIS_SCRIPT=$(realpath "$0")
SCRIPTS_DIR=$(dirname "$THIS_SCRIPT")
ROOT_DIR=$(dirname "$SCRIPTS_DIR")
META_DIR="$ROOT_DIR/meta/"
PYPROJECT_FILE="$META_DIR/pyproject.toml"
BUILD_SCRIPT="$SCRIPTS_DIR/build"
CURRENT_VERSION=$(get_current_version)
NEW_VERSION=$(increment_version "$CURRENT_VERSION" "$VERSION_TYPE")

echo "Current version: $CURRENT_VERSION"
echo "New version: $NEW_VERSION"

# Update the version in pyproject.yaml
sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" "$PYPROJECT_FILE"

# Commit the change
git add "$PYPROJECT_FILE"
git commit -m "Update package version to $NEW_VERSION"

# Create a git tag
git tag "v$NEW_VERSION"

# Push the commit and the tag
git push origin main
git push origin "v$NEW_VERSION"

# Build the distribution files and push to PyPI
sh "$BUILD_SCRIPT" --push-main
